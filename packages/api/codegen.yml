overwrite: true
schema: src/app/modules/**/*.graphql
generates:
  src/app/graphql/generated/schema.ts:
    plugins:
      - "typescript"
      - "typescript-resolvers"
      - typescript-validation-schema # specify to use this plugin
    config:
      contextType: '../context#GraphQLContext'
      scalars:
        DateTime: Date
        EmailAddress: string
        NegativeFloat: number
        NegativeInt: number
        NonNegativeFloat: number
        NonNegativeInt: number
        NonPositiveFloat: number
        NonPositiveInt: number
        PositiveFloat: number
        PositiveInt: number
        Upload: '../modules/scalars/scalarHelper#FileUploadPromise'
      typesPrefix: GQL
      schema: zod
      scalarSchemas:
        DateTime: z.date()
        EmailAddress: z.string().email()
        NegativeFloat: z.number().negative()
        NegativeInt: z.number().int().negative()
        NonNegativeFloat: z.number().nonnegative()
        NonNegativeInt: z.number().int().nonnegative()
        NonPositiveFloat: z.number().nonpositive()
        NonPositiveInt: z.number().int().nonpositive()
        PositiveFloat: z.number().positive()
        PositiveInt: z.number().int().positive()
      enumsAsTypes: true
      mappers:
        User: ../../db/models/User#User
        Recipient: ../../db/models/Recipient#Recipient
        Avatar: ../../db/models/Avatar#Avatar
        DeliveryMan: ../../db/models/DeliveryMan#DeliveryMan
        DeliveryManEdge: ../../db/models/DeliveryMan#DeliveryMan
        Delivery: ../../db/models/Delivery#Delivery
        DeliveryEdge: ../modules/delivery/types/schema#DeliveryEdge
        DeliveryProblem: ../../db/models/DeliveryProblem#DeliveryProblem
  ../web/src/graphql/schema.graphql:
    plugins:
      - schema-ast
  ../web/src/graphql/generated/schema.ts:
    plugins:
      - "typescript"
      - "typescript-operations"
